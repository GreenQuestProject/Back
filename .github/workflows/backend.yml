name: CI/CD Backend

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]

env:
  IMAGE: kteyssere/greenquest-backend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, pdo_mysql
          tools: composer

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ hashFiles('composer.lock') }}
          restore-keys: composer-

      - name: Installer les dépendances
        run: composer install --no-interaction --no-progress --prefer-dist --optimize-autoloader

  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      database:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: greenquest_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Setup PHP (avec Xdebug pour la couverture)
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: xdebug
          extensions: mbstring, xml, ctype, iconv, pdo_mysql
          tools: composer

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ hashFiles('composer.lock') }}
          restore-keys: composer-

      - name: Installer les dépendances
        run: composer install --no-interaction --no-progress --prefer-dist --optimize-autoloader

      - name: Supprimer le schéma
        env:
          DATABASE_URL: mysql://root:root@127.0.0.1:3306/greenquest_test
        run: php bin/console doctrine:schema:drop --force --full-database --no-interaction

      - name: Créer les tables avec Doctrine
        env:
          DATABASE_URL: mysql://root:root@127.0.0.1:3306/greenquest_test
        run: php bin/console doctrine:schema:update --force --no-interaction

      - name: Reconstruire les clés JWT
        run: |
          mkdir -p config/jwt
          echo "${{ secrets.JWT_PRIVATE_KEY_B64 }}" | base64 -d > config/jwt/private.pem
          echo "${{ secrets.JWT_PUBLIC_KEY_B64 }}" | base64 -d > config/jwt/public.pem
          chmod 600 config/jwt/private.pem config/jwt/public.pem

      # --- TESTS + COUVERTURE CLOVER ---
      - name: Exécuter les tests (avec couverture Clover)
        env:
          DATABASE_URL: mysql://root:root@127.0.0.1:3306/greenquest
          JWT_PASSPHRASE: ${{ secrets.JWT_PASSPHRASE }}
        run: |
          mkdir -p build/logs
          php vendor/bin/phpunit --coverage-clover build/logs/clover.xml

      # --- SONARQUBE SCAN ---
      - name: SonarQube Scan for dev
        if: github.ref == 'refs/heads/develop'
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          args: >
            -Dsonar.projectKey=back-dev
            -Dsonar.projectName=back-dev
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.php.coverage.reportPaths=build/logs/clover.xml
            -Dsonar.exclusions=var/**,vendor/**,public/bundles/**
            -Dsonar.coverage.exclusions=src/DataFixtures/**,src/Entity/**
            -Dsonar.projectBaseDir=.
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_DEV }}

      - name: SonarQube Scan for main
        if: github.ref == 'refs/heads/main'
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          args: >
            -Dsonar.projectKey=back
            -Dsonar.projectName=back
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.php.coverage.reportPaths=build/logs/clover.xml
            -Dsonar.exclusions=var/**,vendor/**,public/bundles/**
            -Dsonar.projectBaseDir=.
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}



  deploy_staging:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Connexion à DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker image (staging)
        run: |
          docker build --pull -t $IMAGE:staging .
          docker push $IMAGE:staging

      - name: Déploiement sur VPS (staging)
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          script: |
            set -e
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            cd /var/www
            
            export JWT_PASSPHRASE='${{ secrets.JWT_PASSPHRASE }}'
            export MYSQL_DUMP_USER='${{ secrets.MYSQL_DUMP_USER }}'
            export MYSQL_DUMP_PASSWORD_STAGING='${{ secrets.MYSQL_DUMP_PASSWORD_STAGING }}'

            docker compose up -d db-staging

            BACKUP_DIR=/var/backups/mysql
            mkdir -p "$BACKUP_DIR"
            TS=$(date +%F-%H%M)
            BACKUP_FILE="$BACKUP_DIR/greenquest_staging-$TS.sql.gz"

            docker exec greenquest-db-staging sh -lc \
              "mysqldump -u\"$MYSQL_DUMP_USER\" -p\"$MYSQL_DUMP_PASSWORD_STAGING\" --single-transaction --routines --triggers greenquest_staging" \
              | gzip > "$BACKUP_FILE" || { echo "Backup failed"; exit 1; }

            docker compose up -d --no-deps --pull always --force-recreate backend-staging

            i=1; DB_URL=""
            while [ $i -le 10 ]; do
              DB_URL=$(docker compose exec -T backend-staging php -r 'echo getenv("DATABASE_URL");' 2>/dev/null || true)
              [ -n "$DB_URL" ] && break
              echo "Attente de backend-staging... ($i)"; i=$((i+1)); sleep 3
            done

            case "$DB_URL" in
              *"@db-staging:3306/greenquest_staging"*) echo "DB OK (staging)";;
              *) echo "ATTENTION: URL BDD inattendue pour staging, abort"; exit 1;;
            esac

            if docker compose exec -T backend-staging php bin/console doctrine:migrations:up-to-date --no-interaction >/dev/null 2>&1; then
              echo "Aucune migration à exécuter (staging) — aucune purge de backups."
            else
              echo "Migrations détectées (staging) — purge des anciennes sauvegardes..."
              find "$BACKUP_DIR" -maxdepth 1 -type f -name 'greenquest_staging-*.sql.gz' ! -name "$(basename "$BACKUP_FILE")" -delete || true
            fi

            i=1; while [ $i -le 10 ]; do
              docker compose exec -T backend-staging php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration && break
              echo "retry migrate $i"; i=$((i+1)); sleep 3
            done

            i=1; while [ $i -le 10 ]; do
              docker compose exec -T backend-staging php bin/console cache:clear --env=prod && break
              echo "retry cache:clear $i"; i=$((i+1)); sleep 3
            done
            
            docker compose pull backend-staging-cron || true
            docker compose up -d --no-deps --pull always --force-recreate backend-staging-cron

  deploy_prod:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Connexion à DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker image (prod)
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          docker build --pull -t $IMAGE:$VERSION -t $IMAGE:latest .
          docker push $IMAGE:$VERSION
          docker push $IMAGE:latest

      - name: Déploiement sur VPS (prod)
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          script: |
            set -e
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            cd /var/www

            export JWT_PASSPHRASE='${{ secrets.JWT_PASSPHRASE }}'
            export MYSQL_DUMP_USER='${{ secrets.MYSQL_DUMP_USER }}'
            export MYSQL_DUMP_PASSWORD_PROD='${{ secrets.MYSQL_DUMP_PASSWORD_PROD }}'

            docker compose up -d db

            BACKUP_DIR=/var/backups/mysql
            mkdir -p "$BACKUP_DIR"
            TS=$(date +%F-%H%M)
            BACKUP_FILE="$BACKUP_DIR/greenquest-$TS.sql.gz"

            docker exec greenquest-db sh -lc \
              "mysqldump -u\"$MYSQL_DUMP_USER\" -p\"$MYSQL_DUMP_PASSWORD_PROD\" --single-transaction --routines --triggers greenquest" \
              | gzip > "$BACKUP_FILE" || { echo 'Backup failed'; exit 1; }

            docker compose up -d --no-deps --pull always --force-recreate backend

            i=1; DB_URL=""
            while [ $i -le 10 ]; do
              DB_URL=$(docker compose exec -T backend php -r 'echo getenv("DATABASE_URL");' 2>/dev/null || true)
              [ -n "$DB_URL" ] && break
              echo "Attente de backend... ($i)"; i=$((i+1)); sleep 3
            done

            case "$DB_URL" in
              *"@db:3306/greenquest"*) echo "DB OK (prod)";;
              *) echo "ATTENTION: URL BDD inattendue pour prod, abort"; exit 1;;
            esac

            if docker compose exec -T backend php bin/console doctrine:migrations:up-to-date --no-interaction >/dev/null 2>&1; then
              echo "Aucune migration à exécuter (prod) — aucune purge de backups."
            else
              echo "Migrations détectées (prod) — purge des anciennes sauvegardes..."
              find "$BACKUP_DIR" -maxdepth 1 -type f -name 'greenquest-*.sql.gz' ! -name "$(basename "$BACKUP_FILE")" -delete || true
            fi

            i=1; while [ $i -le 10 ]; do
              docker compose exec -T backend php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration && break
              echo "retry migrate $i"; i=$((i+1)); sleep 3
            done

            i=1; while [ $i -le 10 ]; do
              docker compose exec -T backend php bin/console cache:clear --env=prod && break
              echo "retry cache:clear $i"; i=$((i+1)); sleep 3
            done
            
            docker compose pull backend-cron || true
            docker compose up -d --no-deps --pull always --force-recreate backend-cron
